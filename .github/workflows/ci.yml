name: CI

on:
  pull_request:
  push:

jobs:
  test:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare/
        with:
          cache-key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.toml') }}
      - name: Build & run tests
        run: cargo test -p bevy_asset_loader
      - name: Build & run tests for derive package
        run: cargo test -p bevy_asset_loader_derive
  dynamic-2d-3d-test:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare/
        with:
          cache-key: ${{ runner.os }}-cargo-dynamic-2d-3d-test-${{ hashFiles('**/Cargo.toml') }}
      - name: Build & run tests for 2d, 3d, standard
        run: cargo test --features "2d, 3d, standard_dynamic_assets" -p bevy_asset_loader
      - name: Build & run tests for derive package
        run: cargo test --features "2d, 3d" -p bevy_asset_loader_derive
  progress-tracking-test:
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare/
        with:
          cache-key: ${{ runner.os }}-cargo-progress-tracking-test-${{ hashFiles('**/Cargo.toml') }}
  full-test:
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare/
        with:
          cache-key: ${{ runner.os }}-cargo-full-test-${{ hashFiles('**/Cargo.toml') }}
      - name: Build & run tests progress tracking and 2d,3d,dynamic
        run: cargo test --features "2d, 3d, standard_dynamic_assets" -p bevy_asset_loader
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          cache-key: ubuntu-cargo-lint-${{ hashFiles('**/Cargo.toml') }}
      - uses: ./.github/actions/prepare/
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack
      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -W clippy::doc_markdown -Dwarnings
      - name: Check all feature combinations
        run: cargo hack check --feature-powerset
      - name: Check format
        run: cargo fmt --all -- --check
